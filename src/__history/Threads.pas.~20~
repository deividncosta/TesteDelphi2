unit Threads;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ComCtrls, System.Classes;

type

  TDeividThread = class(TThread)
  private
    FAux: String;
    FMemo: TMemo;
    FProgress: TProgressBar;
    FTempo: Integer;
  public
    constructor Create(AMemo: TMemo; AProgress: TProgressBar; ATempo: Integer); reintroduce;
    procedure Execute; override;
    procedure Sincronizar;
    procedure SincrozizarMemo;
  end;

  TfThreads = class(TForm)
    edtNumero: TEdit;
    edtTempo: TEdit;
    Button1: TButton;
    ProgressBar1: TProgressBar;
    Memo1: TMemo;
    procedure FormCreate(Sender: TObject);
    procedure Button1Click(Sender: TObject);
  private
    { Private declarations }
    procedure ThreadFinalizada(const ID: Integer);
  public
    { Public declarations }
  end;

var
  fThreads: TfThreads;

implementation

uses
  System.Generics.Collections;

{$R *.dfm}

procedure TfThreads.Button1Click(Sender: TObject);
var
  Lista: TObjectList<TDeividThread>;
begin
  Memo1.Lines.Clear;
  ProgressBar1.Position := 0;
  ProgressBar1.Min := 0;
  ProgressBar1.Max := StrToInt(edtNumero.Text) * 100;
  for var I := 0 to StrToInt(edtNumero.Text) do
  begin
    Lista := TObjectList<TDeividThread>.Create;
    Lista.Add(TDeividThread.Create(Memo1,ProgressBar1,StrToInt(edtTempo.Text)));
  end;
end;

{ TDeividThread }

constructor TDeividThread.Create(AMemo: TMemo; AProgress: TProgressBar; ATempo: Integer);
begin
  inherited Create(True);
  Self.FreeOnTerminate := True;

  FAux := '';
  FMemo := AMemo;
  FTempo := ATempo;
  FProgress := AProgress;
end;

procedure TDeividThread.Execute;
var
  I: Integer;
begin
  inherited;
  Self.Synchronize(SincrozizarMemo);
  Sleep(Random(FTempo));
  Self.Synchronize(Sincronizar);
end;

procedure TDeividThread.Sincronizar;
begin
  Self.FMemo.Lines.Add(Self.ThreadID.ToString + ' - Processamento finalizado');
  FProgress.Position := FProgress.Position + 1;
end;

procedure TDeividThread.SincrozizarMemo;
begin
  Self.FMemo.Lines.Add(Self.ThreadID.ToString + ' - Iniciando processamento');
end;

procedure TfThreads.FormCreate(Sender: TObject);
begin
  Memo1.Lines.Clear;
end;

procedure TfThreads.ThreadFinalizada(const ID: Integer);
begin

end;

end.
